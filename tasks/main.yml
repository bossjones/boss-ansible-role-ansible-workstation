---

- include_tasks: "{{boss__ansible__workstation__default_install_type}}.yml"

# python3-dev python-dev python3-pip python-pip

# # https://github.com/nodesource/distributions/blob/master/README.md
# - name: Install latest python pip for python3 and python2
#   shell: |
#     curl https://bootstrap.pypa.io/get-pip.py | python3
#     pip2 install --upgrade pip
#   become: '{{ item }}'
#   args:
#     executable: /bin/bash
#   with_items:
#     - true  # Run as root
#   ignore_errors: yes
#   tags:
#   - pip
#   - python-pip

# - include_tasks: facts.yml

# - name: Add .ssh directories
#   file:
#     path: "/home/{{bossjones__user}}/.ssh"
#     state: "directory"
#     mode: "0700"
#     owner: "{{bossjones__user}}"
#     group: "{{bossjones__user}}"
#   with_items: boss__ansible__workstation__users

# - name: "add vagrant id_rsa key"
#   template:
#     src: "id_rsa.j2"
#     dest: "/home/{{bossjones__user}}/.ssh/id_rsa"
#     mode: "0600"
#     owner: "{{bossjones__user}}"
#     group: "{{bossjones__group}}"
#   become: '{{ item }}'
#   become_user: "{{bossjones__user}}"
#   ignore_errors: yes
#   with_items:
#     - true  # Run as vagrant

# - name: "add vagrant id_rsa.pub key"
#   template:
#     src: "id_rsa.pub.j2"
#     dest: "/home/{{bossjones__user}}/.ssh/id_rsa.pub"
#     mode: "0644"
#     owner: "{{bossjones__user}}"
#     group: "{{bossjones__group}}"
#   become: '{{ item }}'
#   become_user: "{{bossjones__user}}"
#   ignore_errors: yes
#   with_items:
#     - true  # Run as vagrant



### --------------------------

# - name: Install required packages
#   apt: pkg={{ item }} state=latest install_recommends=no
#   with_items: [ 'git', 'python-paramiko', 'python-yaml', 'python-jinja2', 'python-httplib2',
#                 'cdbs', 'debhelper', 'dpkg-dev', 'python-support', 'fakeroot', 'sshpass',
#                 'python-nose', 'python-passlib', 'python-setuptools', 'asciidoc', 'xmlto',
#                 'devscripts', 'build-essential' ]

# - name: Get user home directory
#   shell: echo $HOME
#   register: boss__ansible__workstation__role_ansible_user_home
#   changed_when: False
#   sudo_user: '{{ boss__ansible__workstation__role_ansible_build_user }}'

# - name: Clone Ansible repository
#   git: repo={{ role_ansible_git_repository }} dest={{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}
#        version={{ boss__ansible__workstation__role_ansible_version }} update=yes
#   register: boss__ansible__workstation__role_ansible_git
#   sudo_user: '{{ boss__ansible__workstation__role_ansible_build_user }}'

# - name: Get current Ansible version
#   slurp: src={{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}/VERSION
#   register: boss__ansible__workstation__role_ansible_build_version

# - name: Set Ansible package version
#   set_fact:
#     boss__ansible__workstation__role_ansible_package_version: '{{ boss__ansible__workstation__role_ansible_build_version.content | b64decode | trim }}'

# - name: Build Ansible .deb package
#   command: make deb chdir={{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}
#   register: boss__ansible__workstation__role_ansible_build
#   when: boss__ansible__workstation__role_ansible_git is defined and boss__ansible__workstation__role_ansible_git.changed == True
#   sudo_user: '{{ boss__ansible__workstation__role_ansible_build_user }}'

# - name: Check if new style .deb package is present
#   shell: find {{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}/deb-build/unstable/ -name 'ansible_{{ boss__ansible__workstation__role_ansible_package_version }}-*_all.deb' 2>/dev/null || true
#   register: boss__ansible__workstation__role_ansible_register_new_deb
#   when: (boss__ansible__workstation__role_ansible_build is defined and boss__ansible__workstation__role_ansible_build.changed)

# - name: Check if old style .deb package is present
#   shell: find {{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}/../ -name 'ansible_{{ boss__ansible__workstation__role_ansible_package_version }}_all.deb' 2>/dev/null || true
#   register: boss__ansible__workstation__role_ansible_register_old_deb
#   when: (boss__ansible__workstation__role_ansible_build is defined and boss__ansible__workstation__role_ansible_build.changed)

# - name: Install Ansible .deb package (new version)
#   shell: dpkg -i {{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}/deb-build/unstable/ansible_{{ boss__ansible__workstation__role_ansible_package_version }}-*_all.deb
#   when: boss__ansible__workstation__role_ansible_register_new_deb is defined and boss__ansible__workstation__role_ansible_register_new_deb.stdout != ""

# - name: Install Ansible .deb package (old version)
#   shell: dpkg -i {{ boss__ansible__workstation__role_ansible_user_home.stdout }}/{{ boss__ansible__workstation__role_ansible_build_path }}/../ansible_{{ boss__ansible__workstation__role_ansible_package_version }}_all.deb
#   when: boss__ansible__workstation__role_ansible_register_old_deb is defined and boss__ansible__workstation__role_ansible_register_old_deb.stdout != ""

# - name: Check if Redis is installed
#   stat: path=/usr/bin/redis-server
#   register: boss__ansible__workstation__role_ansible_register_redis

# - name: Enable Redis fact caching in Ansible
#   set_fact:
#     boss__ansible__workstation__role_ansible_fact_caching: 'redis'
#   when: (boss__ansible__workstation__role_ansible_register_redis is defined and boss__ansible__workstation__role_ansible_register_redis.stat.exists)

# - name: Install packages required for Redis support
#   apt:
#     name: 'python-redis'
#     state: 'latest'
#     install_recommends: False
#   when: (boss__ansible__workstation__role_ansible_register_redis is defined and boss__ansible__workstation__role_ansible_register_redis.stat.exists)

# - name: Divert original Ansible configuration
#   command: dpkg-divert --quiet --local --divert /etc/ansible/ansible.cfg.dpkg-divert --rename /etc/ansible/ansible.cfg
#            creates=/etc/ansible/ansible.cfg.dpkg-divert

# - name: Configure /etc/ansible/ansible.cfg
#   template:
#     src: 'etc/ansible/ansible.cfg.j2'
#     dest: '/etc/ansible/ansible.cfg'
#     owner: 'root'
#     group: 'root'
#     mode: '0644'
